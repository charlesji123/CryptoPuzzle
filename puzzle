// SPDX-License-Identifier: Princeton
pragma solidity ^0.8.1;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

// assuming input is one wallet and one puzzle 
contract puzzle {
    address userAddress; // input the user's wallet
    mapping (uint => address) puzzleidToOwner;
    mapping (uint => bool) notforSale;
    mapping (uint => uint) puzzleStartTime;
    uint puzzleID;

    IERC20 public token;
    ERC721 public rewardNFT;

    uint constant entryfeeperPuzzle = 1;
    uint constant expireTime = 20000;


    // mapping (address => (enum, uint)) mappingNFT; 
    event BoughtPuzzle(address indexed _userAddress, uint puzzleID, uint _buyingTime);
    event BoughtToken(uint amount);
    event NFTRewarded (address indexed _sender, address indexed _receipient);

    constructor(address _userAddress, uint _puzzleID) public {
        userAddress = _userAddress;
        puzzleID = _puzzleID;
        token = new ERC20Puzz(); // need to call another contract
        rewardNFT = new puzzleReward(); // need to call another contract
    }

    // can users directlty buy token on the smart contract
    function buyToken(uint256 amount) public {
        require(amount > 0, "You need to sell at least some tokens");
        require(msg.sender.balance >= amount, "Check the token allowance");
        token.transferFrom(msg.sender, address(this), amount);
        payable(msg.sender).transfer(amount);
        emit BoughtToken(amount);
    }

    // buy the puzzle, assume users have token already
    function buyPuzzle(uint256 amount) public payable {
        require (msg.sender == tx.origin, "unverified transaction");
        require (notforSale[puzzleID] == false, "unverified transaction");

        uint256 allowance = token.allowance(msg.sender, address(this)); 
        // gas fee paid in eth or puzz????
        require (allowance >= entryfeeperPuzzle && msg.sender.balance >= tx.gasprice, "not enough money");

        // users transfer the token to the puzzle account 
        token.transferFrom(msg.sender, address(this), amount);
        puzzleidToOwner[puzzleID] = userAddress;

        // record the starting time
        uint startingTime = block.timestamp;
        puzzleStartTime[puzzleID] = startingTime;

        // set the puzzle as not for future sale
        notforSale[puzzleID] = true;

        emit BoughtPuzzle(msg.sender, puzzleID, startingTime);
        }

    // user submits their solution: how to make sure users call the function when they are correct
    function Submit(uint id, uint difLevel, bool isCorrect) public {
        uint endingTime = block.timestamp;
        require (puzzleidToOwner[id] == msg.sender, "not verified owner");
        require (endingTime - puzzleStartTime[id] <= expireTime, "puzzle expired"); 
        require (isCorrect == true, "puzzle not solved"); 
        
        // send users the reward $PUZZ token and the reward NFT
        uint rewardToken = difLevel / (endingTime-puzzleStartTime[id]);
        token.transferFrom(msg.sender, address(this), rewardToken); 
        token.transferFrom(msg.sender, address(this), rewardNFT);

        emit NFTRewarded (address(this), msg.sender);
    }


    }




  
